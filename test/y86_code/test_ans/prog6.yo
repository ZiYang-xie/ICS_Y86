Y86-64 Processor: pipe-std.hcl
33 bytes of code read

Cycle 0. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x0
D: instr = nop, rA = ----, rB = ----, valC = 0x0, valP = 0x0, Stat = BUB
E: instr = nop, valC = 0x0, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = ----, dstM = ----, Stat = BUB
M: instr = nop, Cnd = 0, valE = 0x0, valA = 0x0
   dstE = ----, dstM = ----, Stat = BUB
W: instr = nop, valE = 0x0, valM = 0x0, dstE = ----, dstM = ----, Stat = BUB
	Fetch: f_pc = 0x0, imem_instr = irmovq, f_instr = irmovq
	Execute: ALU: + 0x0 0x0 --> 0x0

Cycle 1. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0xa
D: instr = irmovq, rA = ----, rB = %rsp, valC = 0x30, valP = 0xa, Stat = AOK
E: instr = nop, valC = 0x0, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = ----, dstM = ----, Stat = BUB
M: instr = nop, Cnd = 1, valE = 0x0, valA = 0x0
   dstE = ----, dstM = ----, Stat = BUB
W: instr = nop, valE = 0x0, valM = 0x0, dstE = ----, dstM = ----, Stat = BUB
	Fetch: f_pc = 0xa, imem_instr = call, f_instr = call
	Execute: ALU: + 0x0 0x0 --> 0x0

Cycle 2. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x20
D: instr = call, rA = ----, rB = ----, valC = 0x20, valP = 0x13, Stat = AOK
E: instr = irmovq, valC = 0x30, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = %rsp, dstM = ----, Stat = AOK
M: instr = nop, Cnd = 1, valE = 0x0, valA = 0x0
   dstE = ----, dstM = ----, Stat = BUB
W: instr = nop, valE = 0x0, valM = 0x0, dstE = ----, dstM = ----, Stat = BUB
	Fetch: f_pc = 0x20, imem_instr = ret, f_instr = ret
	Execute: ALU: + 0x30 0x0 --> 0x30

Cycle 3. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x21
D: instr = ret, rA = ----, rB = ----, valC = 0x0, valP = 0x21, Stat = AOK
E: instr = call, valC = 0x20, valA = 0x13, valB = 0x30
   srcA = ----, srcB = %rsp, dstE = %rsp, dstM = ----, Stat = AOK
M: instr = irmovq, Cnd = 1, valE = 0x30, valA = 0x0
   dstE = %rsp, dstM = ----, Stat = AOK
W: instr = nop, valE = 0x0, valM = 0x0, dstE = ----, dstM = ----, Stat = BUB
	Fetch: f_pc = 0x21, imem_instr = rrmovq, f_instr = rrmovq
	Execute: ALU: + 0xfffffffffffffff8 0x30 --> 0x28

Cycle 4. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x21
D: instr = nop, rA = ----, rB = ----, valC = 0x0, valP = 0x0, Stat = BUB
E: instr = ret, valC = 0x0, valA = 0x28, valB = 0x28
   srcA = %rsp, srcB = %rsp, dstE = %rsp, dstM = ----, Stat = AOK
M: instr = call, Cnd = 1, valE = 0x28, valA = 0x13
   dstE = %rsp, dstM = ----, Stat = AOK
W: instr = irmovq, valE = 0x30, valM = 0x0, dstE = %rsp, dstM = ----, Stat = AOK
	Fetch: f_pc = 0x21, imem_instr = rrmovq, f_instr = rrmovq
	Execute: ALU: + 0x8 0x28 --> 0x30
	Writeback: Wrote 0x30 to register %rsp
	Wrote 0x13 to address 0x28

Cycle 5. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x21
D: instr = nop, rA = ----, rB = ----, valC = 0x0, valP = 0x0, Stat = BUB
E: instr = nop, valC = 0x0, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = ----, dstM = ----, Stat = BUB
M: instr = ret, Cnd = 1, valE = 0x30, valA = 0x28
   dstE = %rsp, dstM = ----, Stat = AOK
W: instr = call, valE = 0x28, valM = 0x0, dstE = %rsp, dstM = ----, Stat = AOK
	Fetch: f_pc = 0x21, imem_instr = rrmovq, f_instr = rrmovq
	Memory: Read 0x13 from 0x28
	Execute: ALU: + 0x0 0x0 --> 0x0
	Writeback: Wrote 0x28 to register %rsp

Cycle 6. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x21
D: instr = nop, rA = ----, rB = ----, valC = 0x0, valP = 0x0, Stat = BUB
E: instr = nop, valC = 0x0, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = ----, dstM = ----, Stat = BUB
M: instr = nop, Cnd = 1, valE = 0x0, valA = 0x0
   dstE = ----, dstM = ----, Stat = BUB
W: instr = ret, valE = 0x30, valM = 0x13, dstE = %rsp, dstM = ----, Stat = AOK
	Fetch: f_pc = 0x13, imem_instr = irmovq, f_instr = irmovq
	Execute: ALU: + 0x0 0x0 --> 0x0
	Writeback: Wrote 0x30 to register %rsp

Cycle 7. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x1d
D: instr = irmovq, rA = ----, rB = %rdx, valC = 0xa, valP = 0x1d, Stat = AOK
E: instr = nop, valC = 0x0, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = ----, dstM = ----, Stat = BUB
M: instr = nop, Cnd = 1, valE = 0x0, valA = 0x0
   dstE = ----, dstM = ----, Stat = BUB
W: instr = nop, valE = 0x0, valM = 0x0, dstE = ----, dstM = ----, Stat = BUB
	Fetch: f_pc = 0x1d, imem_instr = halt, f_instr = halt
	Execute: ALU: + 0x0 0x0 --> 0x0

Cycle 8. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x1e
D: instr = halt, rA = ----, rB = ----, valC = 0x0, valP = 0x1e, Stat = HLT
E: instr = irmovq, valC = 0xa, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = %rdx, dstM = ----, Stat = AOK
M: instr = nop, Cnd = 1, valE = 0x0, valA = 0x0
   dstE = ----, dstM = ----, Stat = BUB
W: instr = nop, valE = 0x0, valM = 0x0, dstE = ----, dstM = ----, Stat = BUB
	Fetch: f_pc = 0x1e, imem_instr = halt, f_instr = halt
	Execute: ALU: + 0xa 0x0 --> 0xa

Cycle 9. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x1f
D: instr = halt, rA = ----, rB = ----, valC = 0x0, valP = 0x1f, Stat = HLT
E: instr = halt, valC = 0x0, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = ----, dstM = ----, Stat = HLT
M: instr = irmovq, Cnd = 1, valE = 0xa, valA = 0x0
   dstE = %rdx, dstM = ----, Stat = AOK
W: instr = nop, valE = 0x0, valM = 0x0, dstE = ----, dstM = ----, Stat = BUB
	Fetch: f_pc = 0x1f, imem_instr = halt, f_instr = halt
	Execute: ALU: + 0x0 0x0 --> 0x0

Cycle 10. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x20
D: instr = halt, rA = ----, rB = ----, valC = 0x0, valP = 0x20, Stat = HLT
E: instr = halt, valC = 0x0, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = ----, dstM = ----, Stat = HLT
M: instr = halt, Cnd = 1, valE = 0x0, valA = 0x0
   dstE = ----, dstM = ----, Stat = HLT
W: instr = irmovq, valE = 0xa, valM = 0x0, dstE = %rdx, dstM = ----, Stat = AOK
	Fetch: f_pc = 0x20, imem_instr = ret, f_instr = ret
	Execute: ALU: + 0x0 0x0 --> 0x0
	Writeback: Wrote 0xa to register %rdx

Cycle 11. CC=Z=1 S=0 O=0, Stat=AOK
F: predPC = 0x21
D: instr = ret, rA = ----, rB = ----, valC = 0x0, valP = 0x21, Stat = AOK
E: instr = halt, valC = 0x0, valA = 0x0, valB = 0x0
   srcA = ----, srcB = ----, dstE = ----, dstM = ----, Stat = HLT
M: instr = nop, Cnd = 0, valE = 0x0, valA = 0x0
   dstE = ----, dstM = ----, Stat = BUB
W: instr = halt, valE = 0x0, valM = 0x0, dstE = ----, dstM = ----, Stat = HLT
	Fetch: f_pc = 0x21, imem_instr = rrmovq, f_instr = rrmovq
	Execute: ALU: + 0x0 0x0 --> 0x0
12 instructions executed
Status = HLT
Condition Codes: Z=1 S=0 O=0
Changed Register State:
%rdx:	0x0000000000000000	0x000000000000000a
%rsp:	0x0000000000000000	0x0000000000000030
Changed Memory State:
0x0028:	0x0000000000000000	0x0000000000000013
ISA Check Succeeds
CPI: 8 cycles/5 instructions = 1.60
